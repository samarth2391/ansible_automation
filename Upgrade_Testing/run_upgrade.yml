- name: Run upgrade playbook for build {{ build_version }}
  hosts: all
  gather_facts: false
  vars_files:
    - global_vars.yml
  vars:
    build: "{{ build_version }}"
    upgrade_file: "rollback_build_{{ build_version }}.yml"
  tasks:
    - name: Check if host is reachable
      block:
        - name: Test SSH connectivity to host
          wait_for:
            host: "{{ ansible_host }}"
            port: 22
            timeout: 30
            state: started
          delegate_to: localhost
          connection: local

        - name: Verify host responds to commands
          ping:
          register: ping_result

        - name: Gather facts now that host is confirmed reachable
          setup:

        - name: Log successful connection
          debug:
            msg: |
              "=========================================="
              "HOST REACHABLE: {{ inventory_hostname }}"
              "IP: {{ ansible_host }}"
              "Connection verified successfully"
              "=========================================="

      rescue:
        - name: Set timestamp manually for unreachable host logging
          set_fact:
            manual_timestamp: "{{ lookup('pipe', 'date +%Y-%m-%d') }} {{ lookup('pipe', 'date +%H:%M:%S') }}"

        - name: Log host unreachable error
          debug:
            msg: |
              "=========================================="
              "HOST UNREACHABLE: {{ inventory_hostname }}"
              "IP: {{ ansible_host }}"
              "ERROR: Cannot connect to host"
              "Please verify:"
              "  - Host is powered on"
              "  - IP address is correct: {{ ansible_host }}"
              "  - SSH service is running on port 22"
              "  - Network connectivity exists"
              "  - Firewall rules allow SSH access"
              "=========================================="

        - name: Log to file that host is unreachable
          local_action:
            module: lineinfile
            path: "{{ upgrade_log | default('/var/log/ansible/upgrade.log') }}"
            line: "[{{ manual_timestamp }}] [UNREACHABLE]: Host {{ inventory_hostname }} ({{ ansible_host }}) is not reachable. Cannot proceed with upgrade."
            create: yes
            state: present
          ignore_errors: yes

        - name: Fail with clear error message
          fail:
            msg: |
              HOST UNREACHABLE: {{ inventory_hostname }} ({{ ansible_host }})
              
              The host is not responding to connection attempts.
              
              Troubleshooting steps:
              1. Verify host is powered on
              2. Check IP address: {{ ansible_host }}
              3. Test connectivity: ping {{ ansible_host }}
              4. Verify SSH service: ssh {{ ansible_ssh_user | default('admin') }}@{{ ansible_host }}
              5. Check firewall rules
              6. Review network configuration
              
              Cannot proceed with upgrade until host is reachable.

    - name: Initialize host completion status
      set_fact:
        host_completed: false
        download_attempted: false
        download_success: false
        used_existing_image: false
        upgrade_attempted: false
        upgrade_success: false
        validation_attempted: false
        validation_success: false
        error_messages: []

    # Download latest image if requested - run once on localhost
    - name: Download latest image from builds.versa-networks.com
      block:
        - name: Set download attempt flag
          set_fact:
            download_attempted: true
          run_once: true

        - name: Call Python script to download latest images
          command: >
            python3 /home/versa/git/ansible_automation/Upgrade_Testing/download_latest_image.py
            {{ build_version }}
          delegate_to: localhost
          run_once: true
          register: download_script_result

        - name: Display download script output
          debug:
            msg: "{{ download_script_result.stdout_lines }}"
          when: download_script_result.stdout_lines is defined
          run_once: true

        - name: Set download success flag
          set_fact:
            download_success: true
          run_once: true

        - name: Log download success
          debug:
            msg: |
              "=========================================="
              "DOWNLOAD SUCCESS"
              "Latest images downloaded successfully for version {{ build_version }}"
              "=========================================="
          run_once: true

      rescue:
        - name: Report download failure
          debug:
            msg: |
              "=========================================="
              "DOWNLOAD FAILED"
              "Error: {{ ansible_failed_result.msg | default('Could not download latest image') }}"
              "Will attempt to use existing image"
              "=========================================="
          run_once: true

        - name: Set download failure flag
          set_fact:
            download_success: false
            used_existing_image: true
            error_messages: "{{ error_messages + ['Download failed: ' + (ansible_failed_result.msg | default('Unknown error'))] }}"

      when: download_latest is defined and download_latest | bool

    # Run the upgrade for each host
    - name: Run upgrade playbook
      block:
        - name: Set upgrade attempt flag
          set_fact:
            upgrade_attempted: true

        - name: Include upgrade tasks
          include_tasks: "{{ upgrade_file }}"
          register: upgrade_to_candidate_result

        - name: Check if device was already on target
          set_fact:
            upgrade_success: true
            device_was_on_target: "{{ device_already_on_target | default(false) }}"

        - name: Log upgrade success (device already on target)
          debug:
            msg: |
              "=========================================="
              "UPGRADE SUCCESS for {{ inventory_hostname }}"
              "Device was already on target build"
              "No upgrade/downgrade was needed"
              "=========================================="
          when: device_was_on_target | bool

        - name: Log upgrade success (upgrade completed)
          debug:
            msg: |
              "=========================================="
              "UPGRADE SUCCESS for {{ inventory_hostname }}"
              "Upgrade completed successfully"
              "=========================================="
          when: not (device_was_on_target | bool)
            
      rescue:
        - name: Report upgrade failure
          debug:
            msg: |
              "=========================================="
              "UPGRADE FAILED for {{ inventory_hostname }}"
              "Error: {{ ansible_failed_result.msg | default('Error occurred during upgrade execution') }}"
              "Will still attempt validation"
              "=========================================="

        - name: Set upgrade completion status after failure
          set_fact:
            upgrade_success: false
            error_messages: "{{ error_messages + ['Upgrade failed: ' + (ansible_failed_result.msg | default('Unknown error'))] }}"

    - name: Display upgrade completion status
      debug:
        msg: |
          "=========================================="
          "Host: {{ inventory_hostname }}"
          "Download attempted: {{ download_attempted }}"
          "Download success: {{ download_success }}"
          "Used existing image: {{ used_existing_image }}"
          "Upgrade attempted: {{ upgrade_attempted }}"
          "Upgrade success: {{ upgrade_success }}"
          "Proceeding to validation phase..."
          "=========================================="

    # ALWAYS run post-installation validation regardless of upgrade outcome
    - name: Validate upgrade with post-installation-check verification
      block:
        - name: Set validation attempt flag
          set_fact:
            validation_attempted: true

        - name: Run post-installation validation
          include_tasks: validate_post_install.yml
          register: validation_result

        - name: Set validation success flag
          set_fact:
            validation_success: true

        - name: Log validation success
          debug:
            msg: |
              "=========================================="
              "VALIDATION SUCCESS for {{ inventory_hostname }}"
              "Post-installation check completed successfully"
              "=========================================="

        - name: Log validation success to file
          local_action:
            module: lineinfile
            path: "{{ upgrade_log | default('/var/log/ansible/upgrade.log') }}"
            line: "[{{ ansible_date_time.date }} {{ ansible_date_time.time }}] [VALIDATION_SUCCESS]: Post-installation validation succeeded on host {{ inventory_hostname }}"
            create: yes
            state: present
          when: ansible_date_time is defined

        - name: Log validation success to file (fallback)
          local_action:
            module: shell
            cmd: "echo '[$(date \"+%Y-%m-%d %H:%M:%S\")]  [VALIDATION_SUCCESS]: Post-installation validation succeeded on host {{ inventory_hostname }}' >> {{ upgrade_log | default('/var/log/ansible/upgrade.log') }}"
          when: ansible_date_time is not defined
          ignore_errors: yes

      rescue:
        - name: Report validation failure
          debug:
            msg: |
              "=========================================="
              "VALIDATION FAILED for {{ inventory_hostname }}"
              "Error: {{ ansible_failed_result.msg | default('Post-installation check encountered errors') }}"
              "=========================================="

        - name: Set validation failure flag
          set_fact:
            validation_success: false
            error_messages: "{{ error_messages + ['Validation failed: ' + (ansible_failed_result.msg | default('Unknown error'))] }}"

        - name: Log validation failure to file
          local_action:
            module: lineinfile
            path: "{{ upgrade_log | default('/var/log/ansible/upgrade.log') }}"
            line: "[{{ ansible_date_time.date }} {{ ansible_date_time.time }}] [VALIDATION_FAILED]: Post-installation validation failed on host {{ inventory_hostname }}"
            create: yes
            state: present
          when: ansible_date_time is defined

        - name: Log validation failure to file (fallback)
          local_action:
            module: shell
            cmd: "echo '[$(date \"+%Y-%m-%d %H:%M:%S\")]  [VALIDATION_FAILED]: Post-installation validation failed on host {{ inventory_hostname }}' >> {{ upgrade_log | default('/var/log/ansible/upgrade.log') }}"
          when: ansible_date_time is not defined
          ignore_errors: yes

    - name: Set final host completion status
      set_fact:
        host_completed: true

    - name: Final host status summary
      debug:
        msg: |
          "=========================================="
          "FINAL STATUS for {{ inventory_hostname }}"
          "Download attempted: {{ download_attempted }}"
          "Download successful: {{ download_success }}"
          "Used existing image: {{ used_existing_image }}"
          "Upgrade attempted: {{ upgrade_attempted }}"
          "Upgrade successful: {{ upgrade_success }}"
          "Validation attempted: {{ validation_attempted }}"
          "Validation successful: {{ validation_success }}"
          "Host processing completed: {{ host_completed }}"
          "{% if error_messages | length > 0 %}ERRORS: {{ error_messages | join(', ') }}{% endif %}"
          "=========================================="

    - name: Log final host completion to file
      local_action:
        module: lineinfile
        path: "{{ upgrade_log | default('/var/log/ansible/upgrade.log') }}"
        line: "[{{ ansible_date_time.date }} {{ ansible_date_time.time }}] [HOST_COMPLETED]: Processing completed for {{ inventory_hostname }} - Download: {{ download_success | ternary('SUCCESS', 'SKIPPED/FAILED') }}, Upgrade: {{ upgrade_success | ternary('SUCCESS', 'FAILED') }}, Validation: {{ validation_success | ternary('SUCCESS', 'FAILED') }}"
        create: yes
        state: present
      when: ansible_date_time is defined

    - name: Log final host completion to file (fallback)
      local_action:
        module: shell
        cmd: "echo '[$(date \"+%Y-%m-%d %H:%M:%S\")]  [HOST_COMPLETED]: Processing completed for {{ inventory_hostname }} - Download: {{ download_success | ternary('SUCCESS', 'SKIPPED/FAILED') }}, Upgrade: {{ upgrade_success | ternary('SUCCESS', 'FAILED') }}, Validation: {{ validation_success | ternary('SUCCESS', 'FAILED') }}' >> {{ upgrade_log | default('/var/log/ansible/upgrade.log') }}"
      when: ansible_date_time is not defined
      ignore_errors: yes

    # Report overall failure if any critical step failed
    - name: Mark playbook as failed if critical steps failed
      fail:
        msg: |
          "=========================================="
          "PLAYBOOK COMPLETED WITH FAILURES for {{ inventory_hostname }}"
          "Download: {{ download_success | ternary('✓', '✗') }}"
          "Upgrade: {{ upgrade_success | ternary('✓', '✗') }}"
          "Validation: {{ validation_success | ternary('✓', '✗') }}"
          "Errors: {{ error_messages | join(', ') }}"
          "=========================================="
      when: not (upgrade_success and validation_success)
      ignore_errors: yes